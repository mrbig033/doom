#+PROPERTY: header-args :tangle yes :results none
#+STARTUP: overview

* init
** ID
#+begin_src emacs-lisp
(setq user-full-name "John Doe"
      user-mail-address "john@doe.com")
#+end_src
** Setqs
#+begin_src emacs-lisp
(setq use-package-always-defer t)
(after! lsp-python-ms
  (set-lsp-priority! 'mspyls 1))
#+end_src
** Theming
#+begin_src emacs-lisp
(setq display-line-numbers-type nil
      doom-font (font-spec :family "Menlo" :size 19)
      doom-big-font (font-spec :family "Menlo" :size 19)
      doom-unicode-font (font-spec :family "Menlo" :size 19)
      doom-variable-pitch-font (font-spec :family "Input Mono")
      doom-theme 'doom-one)
#+end_src
* pkgs
** def
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
(package! eyebrowse)
(package! clipmon)
(package! evil-god-state)
(package! evil-snipe :disable t)
#+end_src
** use
*** eyebrowse
#+begin_src emacs-lisp
(use-package! eyebrowse
  :demand t
  :config
  (map! :map override "M-w" 'eyebrowse-next-window-config
        :map override "M-q" 'eyebrowse-prev-window-config
        :leader "v" 'eyebrowse-create-window-config
        :leader "x" 'eyebrowse-close-window-config)
  (eyebrowse-mode +1))
#+end_src

*** evil god state
#+begin_src emacs-lisp
(use-package! evil-god-state
  :init
  (map! :n "," 'evil-execute-in-god-state)
  :config
  (evil-define-key 'god global-map [escape] 'evil-god-state-bail))
#+end_src
*** clipmon
#+begin_src emacs-lisp
(use-package! clipmon
  :custom
  (kill-ring-max 30)
  (savehist-autosave-interval (* 10 60))
  :config
  (clipmon-mode-start))
#+end_src
*** helpful
#+begin_src emacs-lisp
(use-package! helpful
  :custom
  (global-eldoc-mode -1)
  (help-window-select +1)
  :config
  (map! ("C-h e" 'describe-package
         :nvig "C-," 'helpful-at-point
         :map (helpful-mode-map help-mode-map)
         :nvig "C-r" 'helpful-update
         :n "<escape>" 'quit-window)))
#+end_src
**** avy
#+begin_src emacs-lisp
(use-package! avy
  :init
  (map! :n "f" 'avy-goto-word-1-below
        :n "F" 'avy-goto-word-1-above))
#+end_src
**** org
#+begin_src emacs-lisp
(use-package! org
  :init
  (set-popup-rule! "^\\*Org Src" :ignore t)
  :custom
  (org-src-ask-before-returning-to-edit-buffer nil)
  (org-ellipsis ".")
  (org-directory "~/org/")
  :config
  (setq org-src-window-setup 'current-window))
#+end_src
*** ivy
#+begin_src emacs-lisp
(use-package! ivy
  :custom
  (ivy-height 15)
  (ivy-extra-directories nil)
  (counsel-outline-display-style 'title)
  (counsel-find-file-at-point t)
  (counsel-bookmark-avoid-dired t)
  (ivy-count-format "")
  (counsel-grep-swiper-limit 25000)
  (ivy-ignore-buffers '("^#.*#$"
                        "^\\*.*\\*"
                        "^agenda.org$"
                        "magit"
                        "*org-src-fontification.\\*"))

  (counsel-ag nil "~/.emacs.d/" "-G '.org'")

  :config

  (map! :nvi "C-s" 'counsel-grep-or-swiper
        :nvi "M-y" 'counsel-yank-pop
        :nvi "C-." 'counsel-projectile-switch-to-buffer
        :nvi "C-<" 'ivy-switch-buffer
        :nvi "M-u" 'yas-insert-snippet
        :nvi "C-s" 'counsel-grep-or-swiper
        :desc "Counsel Ag" :leader "sg"  'counsel-ag)

  (map! :map (ivy-minibuffer-map ivy-switch-buffer-map)
        "M-y"      'ivy-next-line
        "M-r"      'ivy-next-line
        "C-,"      'ivy-next-line
        "C-."      'ivy-next-line
        "C-/"      'ivy-next-line
        "C-j"      'ivy-immediate-done
        "M-q"      'ivy-done
        "C-k"      'kill-line
        "C-d"      'delete-char
        "C-h"      'delete-backward-char
        "C-w"      'backward-kill-word
        "<insert>" 'yank))
#+end_src
* kbds
#+begin_src emacs-lisp
(define-key key-translation-map (kbd "<f19>") (kbd "C-c"))
(define-key key-translation-map (kbd "<f18>") (kbd "C-x"))


(map! :map override
      :i "C-u"         'my-backward-kill-line
      :n "ge"          'evil-end-of-visual-line
      :n "gr"          'my-sel-to-end
      :v "gr"          'eval-region
      :nv "C-s"        'counsel-grep-or-swiper
      :n "0"           'evil-beginning-of-visual-line
      :n "g0"          'evil-digit-argument-or-evil-beginning-of-line
      :n "M-k"         'windmove-up
      :n "M-j"         'windmove-down
      :n "M-h"         'windmove-left
      :n "M-l"         'windmove-right
      :v "C-c a"       'align-regexp
      :n "M-o"         'better-jumper-jump-backward
      :n "M-i"         'better-jumper-jump-forward
      :v "K"           'ignore
      :i "C-h"         'delete-backward-char
      "M-s"            'evil-switch-to-windows-last-buffer)

(map! :n "<escape>"    'my-save-buffer
      :map (evil-org-mode-map org-mode-map)
      :n "C-o"         'my-counsel-outline
      :n "<backspace>" 'org-edit-special
      :map (prog-mode-map)
      :n "M-RET"       'my-indent-buffer)

(general-unbind
  :keymaps '(evil-org--mode-map org-src-mode-map prog-mode-map)
  :states 'normal
  :with 'org-edit-src-exit
  "<backspace>")

(map! :leader "k" 'kill-this-buffer
      :leader "hn" 'my-show-server
      :leader "tt" 'my-tangle-config
      :leader "hM" 'my-show-major-mode
      :leader "fa" 'goto-agenda
      :leader "fl" 'deer-goto-lisp
      :leader "fp" 'goto-packages
      :leader "fm" 'goto-markdown
      :leader "fc" 'my-doom-goto-private-config-org-file
      :leader "fo" 'goto-org)

(setq doom-localleader-key "m")
#+end_src
* func
#+begin_src emacs-lisp
(defun my-backward-kill-line (arg)
  "Kill ARG lines backward."
  (interactive "p")
  (kill-line (- 1 arg)))

(defun my-backward-kill-line (arg)
  "Kill ARG lines backward."
  (interactive "p")
  (kill-line (- 1 arg)))

(defun my-sel-to-end ()
  (interactive)
  (evil-visual-char)
  (evil-last-non-blank))

(defun my-indent-buffer ()
  (interactive)
  (let ((inhibit-message t))
    (evil-indent
     (point-min)
     (point-max))))

(defun my-save-buffer ()
  (interactive)
  (evil-ex-nohighlight)
  (save-buffer))

(defun goto-settings ()
  (interactive)
  (counsel-ag nil "~/.doom.d/" "-f -G '.org'"))

(defun my-recenter-window ()
  (interactive)
  (recenter-top-bottom
   `(4)))

(defun goto-packages ()
  (interactive)
  (counsel-ag "(use-package! " "~/.doom.d" "-f -G '.org'")
  (my-recenter-window))

(defun goto-functions ()
  (interactive)
  (counsel-ag "(defun " "~/.doom.d" "-f -G '.org'")
  (my-recenter-window))

(defun my-tangle-config ()
  (interactive)
  (my-save-some-buffers)
  (start-process-shell-command "tangle config.org" nil "~/dotfiles/scripts/emacs_scripts/nt-config")
  (message " config tangled"))

(defun my-tangle-restart ()
  (interactive)
  (my-save-some-buffers)
  (start-process-shell-command "tangle restart" nil "~/dotfiles/scripts/emacs_scripts/nt-config")
  (doom/restart-and-restore))

(defun my-tangle-debug ()
  (interactive)
  (my-save-some-buffers)
  (start-process-shell-command "tangle restart" nil "emacs --debug-init &")
  (message " tangle debug"))

(map! :desc "Tangle Init" :leader "att" 'my-tangle-config)

(defun my-sort-lines-by-length (reverse beg end)
  "sort lines by length."
  (interactive "p\nr")
  (save-excursion
    (save-restriction
      (narrow-to-region beg end)
      (goto-char (point-min))
      (let ;; to make `end-of-line' and etc. to ignore fields.
          ((inhibit-field-text-motion t))
        (sort-subr reverse 'forward-line 'end-of-line nil nil
                   (lambda (l1 l2)
                     (apply #'< (mapcar (lambda (range) (- (cdr range) (car range)))
                                        (list l1 l2)))))
        (reverse-region beg end)))))

(defun my-show-server ()
  (interactive)
  (describe-variable 'server-name))

(defun my-show-major-mode ()
  (interactive)
  (describe-variable 'major-mode))

(defun my-counsel-outline ()
  (interactive)
  (my-widen-to-center)
  (counsel-outline))

(defun my-widen-to-center ()
  (interactive)
  (widen)
  (recenter-top-bottom))

(defun my-save-some-buffers ()
  (interactive)
  (let ((inhibit-message t))
    (evil-ex-nohighlight)
    (save-some-buffers t 0)))

(defun my-doom-goto-private-config-org-file ()
  "Open your private config.org file."
  (interactive)
  (find-file (expand-file-name "config.org" doom-private-dir)))
#+end_src
